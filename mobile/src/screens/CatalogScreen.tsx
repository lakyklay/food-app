import React, { useEffect, useState } from 'react';
import { 
  View, 
  Text, 
  FlatList, 
  ActivityIndicator, 
  SafeAreaView, 
  StyleSheet,
  RefreshControl,
  StatusBar
} from 'react-native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { api, Product } from '../api/client';
import { CatalogStackParamList } from './CatalogWrapper';
import ProductCard from '../components/ProductCard';
import CategoryFilter from '../components/CategoryFilter';
import ProductModal from '../components/ProductModal';
import { useCart } from '../context/CartContext';

type CatalogScreenNavigationProp = NativeStackNavigationProp<CatalogStackParamList, 'CatalogMain'>;

interface CatalogScreenProps {
  navigation: CatalogScreenNavigationProp;
}

interface Category {
  id: string;
  name: string;
  icon: string;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockProducts: Product[] = [
  {
    id: '1',
    name: '–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π –∏ –±–∞–∑–∏–ª–∏–∫–æ–º',
    media: [],
    base_price: 850,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: ['–º–æ–ª–æ–∫–æ', '–≥–ª—é—Ç–µ–Ω'],
    tags: ['pizza', '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è']
  },
  {
    id: '2',
    name: '–ë—É—Ä–≥–µ—Ä –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
    description: '–°–æ—á–Ω–∞—è –≥–æ–≤—è–∂—å—è –∫–æ—Ç–ª–µ—Ç–∞ —Å –æ–≤–æ—â–∞–º–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–æ—É—Å–æ–º',
    media: [],
    base_price: 650,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: ['–≥–ª—é—Ç–µ–Ω', '–≥–æ—Ä—á–∏—Ü–∞'],
    tags: ['burger', '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è']
  },
  {
    id: '3',
    name: '–†–æ–ª–ª –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è',
    description: '–†–æ–ª–ª —Å –∫—Ä–∞–±–æ–º, –∞–≤–æ–∫–∞–¥–æ –∏ –æ–≥—É—Ä—Ü–æ–º',
    media: [],
    base_price: 450,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: ['—Ä—ã–±–∞', '—Å–æ—è'],
    tags: ['sushi', '—è–ø–æ–Ω—Å–∫–∞—è']
  },
  {
    id: '4',
    name: '–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞',
    description: '–°–ø–∞–≥–µ—Ç—Ç–∏ —Å –±–µ–∫–æ–Ω–æ–º, —è–π—Ü–æ–º –∏ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º',
    media: [],
    base_price: 750,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: ['–≥–ª—é—Ç–µ–Ω', '–º–æ–ª–æ–∫–æ', '—è–π—Ü–∞'],
    tags: ['pasta', '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è']
  },
  {
    id: '5',
    name: '–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π',
    description: '–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏–Ω—ã–º —Ñ–∏–ª–µ, —Å—É—Ö–∞—Ä–∏–∫–∞–º–∏ –∏ —Å–æ—É—Å–æ–º –¶–µ–∑–∞—Ä—å',
    media: [],
    base_price: 550,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: ['–≥–ª—é—Ç–µ–Ω', '–≥–æ—Ä—á–∏—Ü–∞'],
    tags: ['salad', '–∑–¥–æ—Ä–æ–≤–æ–µ']
  },
  {
    id: '6',
    name: '–¢–∏—Ä–∞–º–∏—Å—É',
    description: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç —Å –∫–æ—Ñ–µ –∏ –º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ',
    media: [],
    base_price: 350,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: ['–º–æ–ª–æ–∫–æ', '—è–π—Ü–∞'],
    tags: ['dessert', '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è']
  },
  {
    id: '7',
    name: '–õ–∞—Ç—Ç–µ',
    description: '–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º –∏ –º–æ–ª–æ—á–Ω–æ–π –ø–µ–Ω–∫–æ–π',
    media: [],
    base_price: 250,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: ['–º–æ–ª–æ–∫–æ'],
    tags: ['coffee', '–Ω–∞–ø–∏—Ç–∫–∏']
  },
  {
    id: '8',
    name: '–°—É–ø –¢–æ–º –Ø–º',
    description: '–û—Å—Ç—Ä—ã–π —Ç–∞–π—Å–∫–∏–π —Å—É–ø —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏ –∏ –∫–æ–∫–æ—Å–æ–≤—ã–º –º–æ–ª–æ–∫–æ–º',
    media: [],
    base_price: 680,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: ['—Ä—ã–±–∞', '–º–æ–ª–ª—é—Å–∫–∏'],
    tags: ['soup', '—Ç–∞–π—Å–∫–∞—è']
  },
  {
    id: '9',
    name: '–°—Ç–µ–π–∫ –†–∏–±–∞–π',
    description: '–°–æ—á–Ω—ã–π —Å—Ç–µ–π–∫ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã —Å –æ–≤–æ—â–∞–º–∏ –≥—Ä–∏–ª—å',
    media: [],
    base_price: 1200,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: [],
    tags: ['steak', '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è']
  },
  {
    id: '10',
    name: '–ü–∞—ç–ª—å—è',
    description: '–ò—Å–ø–∞–Ω—Å–∫–æ–µ –±–ª—é–¥–æ —Å —Ä–∏—Å–æ–º, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ —à–∞—Ñ—Ä–∞–Ω–æ–º',
    media: [],
    base_price: 950,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: ['—Ä—ã–±–∞', '–º–æ–ª–ª—é—Å–∫–∏'],
    tags: ['paella', '–∏—Å–ø–∞–Ω—Å–∫–∞—è']
  },
  {
    id: '11',
    name: '–ß–∏–∑–∫–µ–π–∫',
    description: '–ù–µ–∂–Ω—ã–π —á–∏–∑–∫–µ–π–∫ —Å —è–≥–æ–¥–Ω—ã–º —Å–æ—É—Å–æ–º',
    media: [],
    base_price: 420,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: ['–º–æ–ª–æ–∫–æ', '–≥–ª—é—Ç–µ–Ω'],
    tags: ['dessert', '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è']
  },
  {
    id: '12',
    name: '–ú–æ—Ö–∏—Ç–æ',
    description: '–û—Å–≤–µ–∂–∞—é—â–∏–π –∫–æ–∫—Ç–µ–π–ª—å —Å –ª–∞–π–º–æ–º –∏ –º—è—Ç–æ–π',
    media: [],
    base_price: 380,
    currency: '‚ÇΩ',
    variants: [],
    modifier_groups: [],
    allergens: [],
    tags: ['drink', '–∫–æ–∫—Ç–µ–π–ª—å']
  }
];

const categories: Category[] = [
  { id: 'pizza', name: '–ü–∏—Ü—Ü–∞', icon: 'üçï' },
  { id: 'burger', name: '–ë—É—Ä–≥–µ—Ä—ã', icon: 'üçî' },
  { id: 'sushi', name: '–°—É—à–∏', icon: 'üç£' },
  { id: 'pasta', name: '–ü–∞—Å—Ç–∞', icon: 'üçù' },
  { id: 'salad', name: '–°–∞–ª–∞—Ç—ã', icon: 'ü•ó' },
  { id: 'dessert', name: '–î–µ—Å–µ—Ä—Ç—ã', icon: 'üç∞' },
  { id: 'drink', name: '–ù–∞–ø–∏—Ç–∫–∏', icon: 'ü•§' },
  { id: 'coffee', name: '–ö–æ—Ñ–µ', icon: '‚òï' },
];

export default function CatalogScreen({ navigation }: CatalogScreenProps) {
  const { addItem } = useCart();
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [modalVisible, setModalVisible] = useState(false);
  
  useEffect(() => {
    loadProducts();
  }, []);

  const loadProducts = async () => {
    try {
      const apiProducts = await api.getProducts();
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º API –¥–∞–Ω–Ω—ã–µ —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const allProducts = [...apiProducts, ...mockProducts];
      setProducts(allProducts);
    } catch (error) {
      console.error('Failed to load products:', error);
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      setProducts(mockProducts);
    } finally {
      setLoading(false);
    }
  };

  const onRefresh = async () => {
    setRefreshing(true);
    await loadProducts();
    setRefreshing(false);
  };

  const filteredProducts = selectedCategory 
    ? products.filter(product => 
        product.tags.some(tag => tag.toLowerCase() === selectedCategory.toLowerCase())
      )
    : products;

  const handleSelectCategory = (categoryId: string | null) => {
    setSelectedCategory(categoryId);
  };

  const handleProductPress = (product: Product) => {
    setSelectedProduct(product);
    setModalVisible(true);
  };

  const handleAddToCart = (product: Product) => {
    addItem(product, 1);
  };

  const handleCloseModal = () => {
    setModalVisible(false);
    setSelectedProduct(null);
  };

  const renderProduct = ({ item }: { item: Product }) => (
    <ProductCard
      product={item}
      onPress={() => handleProductPress(item)}
      onAddToCart={() => handleAddToCart(item)}
    />
  );

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="dark-content" backgroundColor="#fff" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#FF5722" />
          <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor="#fff" />
      
      <View style={styles.header}>
        <Text style={styles.title}>üçΩÔ∏è –ú–µ–Ω—é</Text>
        <Text style={styles.subtitle}>–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ</Text>
      </View>

      <CategoryFilter
        categories={categories}
        selectedCategory={selectedCategory}
        onSelectCategory={handleSelectCategory}
      />

      <FlatList
        data={filteredProducts}
        keyExtractor={(item) => item.id}
        renderItem={renderProduct}
        numColumns={2}
        columnWrapperStyle={styles.row}
        contentContainerStyle={styles.listContainer}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={['#FF5722']}
            tintColor="#FF5722"
          />
        }
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>üòî</Text>
            <Text style={styles.emptyTitle}>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</Text>
            <Text style={styles.emptySubtitle}>
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            </Text>
          </View>
        }
      />
      
      <ProductModal
        product={selectedProduct}
        visible={modalVisible}
        onClose={handleCloseModal}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    backgroundColor: '#fff',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666',
  },
  listContainer: {
    padding: 16,
  },
  row: {
    justifyContent: 'space-between',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
  },
  emptyText: {
    fontSize: 48,
    marginBottom: 16,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  emptySubtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
});
